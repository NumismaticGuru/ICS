from datetime import date
import bs4, requests, os
import docx
from docx.shared import Inches

today = date.today()

"""GOLD"""

def getSPOTrice(productUrl):
    res = requests.get("https://www.kitco.com/charts/livegold.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#sp-bid") ##css selector
    return elem[0].text.strip()

def getGEPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/1-oz-us-american-gold-eagle-coin-dates-our-choice.html#")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)") ##css selector
    return elem[0].text.strip()

def getHALFGEPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/1-2-oz-us-american-gold-eagle-coin.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)") ##css selector
    return elem[0].text.strip()

def getQUARTERGEPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/1-4-oz-us-american-gold-eagle-coin-dates-our-choice.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)") ##css selector
    return elem[0].text.strip()

def getTEHNTHGEPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/2020-american-eagle-1-10-oz-gold-coin-bu.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)") ##css selector
    return elem[0].text.strip()

def getGBPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/1-oz-gold-buffalo-coin-bu.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def getGMPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/2020-canadian-1-oz-gold-maple-leaf-coin.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def getKrugPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/1-oz-south-africa-gold-krugerrand-random-year.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def getBarPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/1-oz-royal-canadian-mint-rcm-gold-bar-9999-fine-in-assay-card.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def getAUSAINTPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/20-saint-gaudens-us-mint-gold-double-eagle-almost-uncirculated-au-or-better.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def getFIVECOMMEMPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/5-dollar-gold-us-commem.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

"""SILVER"""

def getSilver_SPOTrice(productUrl):
    res = requests.get("https://www.kitco.com/charts/livesilver.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#sp-bid") ##css selector
    return elem[0].text.strip()

def getSEPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/1-oz-american-silver-eagle-random-year.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def getBulkSEPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/1-oz-american-silver-eagle-random-year.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(3) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def get2020SEPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/2020-american-eagle-1-oz-silver-coin-bu.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def getJUNKPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/90-silver-quarters-100-face-value-7564.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def getSIlMAPPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/silver-maple-leaf-coin-1-oz-canadian-brilliant-uncirculated.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def getSILBARPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/1-oz-999-fine-silver-bar.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def get5ozSILBARPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/5-oz-999-fine-silver-bar-our-choice.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

def getTENOUNCEPrice(productUrl):
    res = requests.get("https://www.providentmetals.com/10-oz-silver-bar-varied-design-new-silvertowne.html")
    soup = bs4.BeautifulSoup(res.text, "html.parser")
    elem = soup.select("#producttable > tbody > tr:nth-child(1) > td:nth-child(2)")  ##css selector
    return elem[0].text.strip()

"""USE METHODS TO SAVE VARIABLES"""



GSpot_Price = getSPOTrice('https://www.kitco.com/charts/livegold.html')
GOLD_SPOT = ("Spot gold " + GSpot_Price)

GE_price = getGEPrice('https://www.providentmetals.com/1-oz-us-american-gold-eagle-coin-dates-our-choice.html#')
GOLD_EAGLE = (f'Gold Eagle {GE_price}')

HALFGE_price = getHALFGEPrice("https://www.providentmetals.com/1-2-oz-us-american-gold-eagle-coin.html")
HALFGE = ("1/2 GE " + HALFGE_price)

QUARTERGE_price = getQUARTERGEPrice("https://www.providentmetals.com/1-4-oz-us-american-gold-eagle-coin-dates-our-choice.html")
QUARTERGE = ("1/4 GE "+ QUARTERGE_price)

TENTHGE_price = getTEHNTHGEPrice("https://www.providentmetals.com/2020-american-eagle-1-10-oz-gold-coin-bu.html")
TENTHGE = ("1/10 GE " + TENTHGE_price)

GB_price = getGBPrice('https://www.providentmetals.com/1-oz-gold-buffalo-coin-bu.html')
GOLD_BUFFALO = ("Gold Buffalo " + GB_price)

GM_price = getGMPrice('https://www.providentmetals.com/2020-canadian-1-oz-gold-maple-leaf-coin.html')
GOLD_MAPLE = ("Gold Maple " + GM_price)

Krug_price = getKrugPrice('https://www.providentmetals.com/1-oz-south-africa-gold-krugerrand-random-year.html')
KRUGERRAND = ("Krugerrand " + Krug_price)

GOLDBAR_price = getBarPrice('https://www.providentmetals.com/1-oz-royal-canadian-mint-rcm-gold-bar-9999-fine-in-assay-card.html')
GOLDBAR = ("Bar/Generic " + GOLDBAR_price)

AUSAINT_price = getAUSAINTPrice("https://www.providentmetals.com/20-saint-gaudens-us-mint-gold-double-eagle-almost-uncirculated-au-or-better.html")
AUSAINT = ("AU+ Saint " + AUSAINT_price)

FIVECOMMEM_price = getFIVECOMMEMPrice("https://www.providentmetals.com/5-dollar-gold-us-commem.html")
FIVECOMMEM = ("$5 Commem " + FIVECOMMEM_price)

"""SILVER"""

Silver_Spot = getSilver_SPOTrice("https://www.kitco.com/charts/livesilver.html")
SILVER = ("Spot Silver "+ Silver_Spot)

SE_price = getSEPrice("https://www.providentmetals.com/1-oz-american-silver-eagle-random-year.html")
SILVER_EAGLE = ("Random Silver Eagle " + SE_price)

BulkSE_price = getBulkSEPrice("https://www.providentmetals.com/1-oz-american-silver-eagle-random-year.html")
BULKSE = ("Bulk Silver Eagle " + BulkSE_price)

SE2020_price = get2020SEPrice("https://www.providentmetals.com/2020-american-eagle-1-oz-silver-coin-bu.html")
SE2020 = ("2020 Silver Eagle " + SE2020_price)

JUNK_price = getJUNKPrice("https://www.providentmetals.com/90-silver-quarters-100-face-value-7564.html")
JUNK = ("Junk price per 100 FV " + JUNK_price)

SilMAP_price = getSIlMAPPrice("https://www.providentmetals.com/silver-maple-leaf-coin-1-oz-canadian-brilliant-uncirculated.html")
SILVER_MAPLE = ("Silver Maple " + SilMAP_price)

OUNCEsilver_price = getSILBARPrice("https://www.providentmetals.com/1-oz-999-fine-silver-bar.html")
OUNCE_SILVER = ("Silver ounce " + OUNCEsilver_price)

FIVEounce_price = get5ozSILBARPrice("https://www.providentmetals.com/5-oz-999-fine-silver-bar-our-choice.html")
FIVE_OUNCE = ("5 oz bar " + FIVEounce_price)

TENOUNCE_price = getTENOUNCEPrice("https://www.providentmetals.com/10-oz-silver-bar-varied-design-new-silvertowne.html")
TEN_OUNCE = ("10 oz bar " + TENOUNCE_price)

saleSheet = docx.Document()

saleSheet.add_heading('Bullion Sell Prices\t\t\t' + str(today.month) + "-"+ str(today.day) + "-" + str(today.year), 0)


records = (
    (GOLD_EAGLE, SILVER_EAGLE),
    (HALFGE, BULKSE),
    (QUARTERGE, SE2020),
    (TENTHGE, JUNK),
    (GOLD_BUFFALO, SILVER_MAPLE),
    (GOLD_MAPLE, OUNCE_SILVER),
    (KRUGERRAND, FIVE_OUNCE),
    (GOLDBAR,TEN_OUNCE),
    (AUSAINT, ""),
    (FIVECOMMEM,"")
)

table = saleSheet.add_table(rows=1, cols=2)
hdr_cells = table.rows[0].cells
hdr_cells[0].text = (GOLD_SPOT)
hdr_cells[1].text = (SILVER)

for t, z in records:
    row_cells = table.add_row().cells
    row_cells[0].text = str(t)
    row_cells[1].text = z


saleSheet.save('demo.docx')
